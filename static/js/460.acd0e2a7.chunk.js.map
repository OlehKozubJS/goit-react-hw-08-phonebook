{"version":3,"file":"static/js/460.acd0e2a7.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/PhonebookCSS/Alert.module.css?aaa1","components/Alert.jsx","redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","components/ContactForm.jsx","webpack://react-homework-template/./src/components/PhonebookCSS/ContactList.module.css?3814","components/ContactList.jsx","webpack://react-homework-template/./src/components/PhonebookCSS/Filter.module.css?bc6b","components/Filter.jsx","components/LoadAlert.jsx","pages/Contacts.jsx","webpack://react-homework-template/./src/components/PhonebookCSS/ContactForm.module.css?3c68","webpack://react-homework-template/./src/components/PhonebookCSS/Pnonebook.module.css?94c7"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"alert\":\"Alert_alert__LhKd2\",\"alertText\":\"Alert_alertText__EomJE\",\"alertButton\":\"Alert_alertButton__dE1w+\",\"hidden\":\"Alert_hidden__4kRzh\"};","import propTypes from 'prop-types';\nimport AlertStyles from './PhonebookCSS/Alert.module.css';\n\nexport const Alert = ({ clickFunction, name }) => {\n  return (\n    <div className={AlertStyles.alert}>\n      <span className={AlertStyles.alertText}>\n        {name} is already in contacts!\n      </span>\n      <button className={AlertStyles.alertButton} onClick={clickFunction}>\n        Close\n      </button>\n    </div>\n  );\n};\n\nAlert.propTypes = {\n  clickFunction: propTypes.func.isRequired,\n  name: propTypes.string.isRequired,\n};\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import ContactFormStyles from './PhonebookCSS/ContactForm.module.css';\nimport { Alert } from './Alert';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from '../redux/contacts/selectors';\nimport { addContact } from '../redux/contacts/operations';\nimport { nanoid } from 'nanoid';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const closeAlert = () => {\n    setName('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const { name, number } = event.currentTarget.elements;\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.value.toLowerCase()\n      )\n    ) {\n      setName(name.value);\n    } else {\n      dispatch(\n        addContact({ id: nanoid(), name: name.value, number: number.value })\n      );\n      setName('');\n    }\n    event.currentTarget.reset();\n  };\n\n  return (\n    <>\n      <form className={ContactFormStyles.contactForm} onSubmit={handleSubmit}>\n        <label htmlFor=\"name\">\n          <h3 className={ContactFormStyles.contactFormInputHeader}>Name</h3>\n          <input\n            type=\"text\"\n            className={ContactFormStyles.contactFormInput}\n            id=\"name\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor=\"number\">\n          <h3 className={ContactFormStyles.contactFormInputHeader}>Number</h3>\n          <input\n            type=\"tel\"\n            id=\"number\"\n            name=\"number\"\n            className={ContactFormStyles.contactFormInput}\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button\n          className={ContactFormStyles.contactFormSubmitButton}\n          type=\"submit\"\n        >\n          Add contact\n        </button>\n      </form>\n      {name && <Alert name={name} clickFunction={closeAlert} />}\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__8VRsy\",\"contactListItem\":\"ContactList_contactListItem__M3Z+I\",\"contactListItemText\":\"ContactList_contactListItemText__t3DO8\",\"contactListItemButton\":\"ContactList_contactListItemButton__zfiV9\"};","import ContactListStyles from './PhonebookCSS/ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectFilter } from '../redux/contacts/selectors';\nimport { fetchContacts, deleteContact } from '../redux/contacts/operations';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = (query, items) => {\n    const filteredItems = items.filter(contact =>\n      contact.name.toLowerCase().includes(query.toLowerCase())\n    );\n    return filteredItems;\n  };\n\n  const data = getFilteredContacts(filter, contacts);\n\n  return (\n    <ul className={ContactListStyles.contactList}>\n      {data.map(item => (\n        <li key={item.id} className={ContactListStyles.contactListItem}>\n          <span className={ContactListStyles.contactListItemText}>\n            {item.name}: {item.number}\n          </span>\n          <button\n            data-id={item.id}\n            className={ContactListStyles.contactListItemButton}\n            onClick={event =>\n              dispatch(deleteContact(event.currentTarget.dataset.id))\n            }\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchInputLabel\":\"Filter_searchInputLabel__qQp4m\",\"searchInputHeader\":\"Filter_searchInputHeader__mxsUr\",\"searchInput\":\"Filter_searchInput__zeZe-\"};","import FilterStyles from './PhonebookCSS/Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { searchQueryInput } from '../redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <label htmlFor=\"searchInput\" className={FilterStyles.searchInputLabel}>\n      <h3 className={FilterStyles.searchInputHeader}>Find contacts by name</h3>\n      <input\n        type=\"text\"\n        id=\"searchInput\"\n        className={FilterStyles.searchInput}\n        onChange={event =>\n          dispatch(searchQueryInput(event.currentTarget.value))\n        }\n      />\n    </label>\n  );\n};\n","import AlertStyles from './PhonebookCSS/Alert.module.css';\n\nexport const LoadAlert = ({ children }) => {\n  return (\n    <div className={AlertStyles.alert}>\n      <span className={AlertStyles.alertText}>{children}</span>\n    </div>\n  );\n};\n","import { ContactForm } from '../components/ContactForm';\nimport { ContactList } from '../components/ContactList';\nimport { Filter } from '../components/Filter';\nimport { LoadAlert } from '../components/LoadAlert';\nimport PhonebookStyles from '../components/PhonebookCSS/Pnonebook.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading, selectError } from '../redux/contacts/selectors';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <div className={PhonebookStyles.phonebook}>\n      <h1 className={PhonebookStyles.phonebookHeader}>Phonebook</h1>\n      <ContactForm />\n      {isLoading && !error && <LoadAlert>Request in progress...</LoadAlert>}\n      <h2 className={PhonebookStyles.contactsHeader}>Contacts</h2>\n      <Filter className=\"filterInput\" />\n      <ContactList className=\"contactList\" />\n    </div>\n  );\n};\n\nexport default Contacts;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__TtuIw\",\"contactFormInputHeader\":\"ContactForm_contactFormInputHeader__5SaBw\",\"contactFormInput\":\"ContactForm_contactFormInput__HKnGP\",\"contactFormSubmitButton\":\"ContactForm_contactFormSubmitButton__aSs6C\"};","// extracted by mini-css-extract-plugin\nexport default {\"phonebook\":\"Pnonebook_phonebook__OfqoV\",\"phonebookHeader\":\"Pnonebook_phonebookHeader__T-z5J\",\"contactsHeader\":\"Pnonebook_contactsHeader__LBCb+\",\"homeHeader\":\"Pnonebook_homeHeader__qAb4A\"};"],"names":["Alert","clickFunction","name","className","AlertStyles","onClick","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","setName","useSelector","dispatch","useDispatch","ContactFormStyles","onSubmit","event","preventDefault","currentTarget","elements","number","some","contact","toLowerCase","value","addContact","reset","htmlFor","type","pattern","title","required","ContactList","useEffect","fetchContacts","query","data","includes","ContactListStyles","map","item","deleteContact","dataset","Filter","FilterStyles","onChange","searchQueryInput","LoadAlert","children","PhonebookStyles"],"sourceRoot":""}